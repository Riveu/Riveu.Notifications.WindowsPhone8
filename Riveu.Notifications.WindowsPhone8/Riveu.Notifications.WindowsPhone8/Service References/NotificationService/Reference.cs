//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34003
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.Phone.ServiceReference, version 3.7.0.0
// 
namespace Riveu.Notifications.WindowsPhone8.NotificationService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="NotificationService.INotificationService")]
    public interface INotificationService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/INotificationService/AuthenticateUser", ReplyAction="http://tempuri.org/INotificationService/AuthenticateUserResponse")]
        System.IAsyncResult BeginAuthenticateUser(string username, string password, System.AsyncCallback callback, object asyncState);
        
        bool EndAuthenticateUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/INotificationService/GetNotifications", ReplyAction="http://tempuri.org/INotificationService/GetNotificationsResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<object>))]
        System.IAsyncResult BeginGetNotifications(string username, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<object> EndGetNotifications(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/INotificationService/RegisterSubscriber", ReplyAction="http://tempuri.org/INotificationService/RegisterSubscriberResponse")]
        System.IAsyncResult BeginRegisterSubscriber(string username, string password, string Uri, string deviceType, string deviceId, System.AsyncCallback callback, object asyncState);
        
        void EndRegisterSubscriber(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/INotificationService/UnregisterSubscriber", ReplyAction="http://tempuri.org/INotificationService/UnregisterSubscriberResponse")]
        System.IAsyncResult BeginUnregisterSubscriber(string username, string password, string deviceType, string deviceId, System.AsyncCallback callback, object asyncState);
        
        void EndUnregisterSubscriber(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/INotificationService/SendNotification", ReplyAction="http://tempuri.org/INotificationService/SendNotificationResponse")]
        System.IAsyncResult BeginSendNotification(string username, string password, string message, System.AsyncCallback callback, object asyncState);
        
        void EndSendNotification(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/INotificationService/RegisterUser", ReplyAction="http://tempuri.org/INotificationService/RegisterUserResponse")]
        System.IAsyncResult BeginRegisterUser(string username, string password, System.AsyncCallback callback, object asyncState);
        
        bool EndRegisterUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/INotificationService/VerifyUserAccountExists", ReplyAction="http://tempuri.org/INotificationService/VerifyUserAccountExistsResponse")]
        System.IAsyncResult BeginVerifyUserAccountExists(string username, System.AsyncCallback callback, object asyncState);
        
        bool EndVerifyUserAccountExists(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface INotificationServiceChannel : Riveu.Notifications.WindowsPhone8.NotificationService.INotificationService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AuthenticateUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AuthenticateUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetNotificationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetNotificationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<object> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<object>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RegisterUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RegisterUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class VerifyUserAccountExistsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public VerifyUserAccountExistsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class NotificationServiceClient : System.ServiceModel.ClientBase<Riveu.Notifications.WindowsPhone8.NotificationService.INotificationService>, Riveu.Notifications.WindowsPhone8.NotificationService.INotificationService {
        
        private BeginOperationDelegate onBeginAuthenticateUserDelegate;
        
        private EndOperationDelegate onEndAuthenticateUserDelegate;
        
        private System.Threading.SendOrPostCallback onAuthenticateUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetNotificationsDelegate;
        
        private EndOperationDelegate onEndGetNotificationsDelegate;
        
        private System.Threading.SendOrPostCallback onGetNotificationsCompletedDelegate;
        
        private BeginOperationDelegate onBeginRegisterSubscriberDelegate;
        
        private EndOperationDelegate onEndRegisterSubscriberDelegate;
        
        private System.Threading.SendOrPostCallback onRegisterSubscriberCompletedDelegate;
        
        private BeginOperationDelegate onBeginUnregisterSubscriberDelegate;
        
        private EndOperationDelegate onEndUnregisterSubscriberDelegate;
        
        private System.Threading.SendOrPostCallback onUnregisterSubscriberCompletedDelegate;
        
        private BeginOperationDelegate onBeginSendNotificationDelegate;
        
        private EndOperationDelegate onEndSendNotificationDelegate;
        
        private System.Threading.SendOrPostCallback onSendNotificationCompletedDelegate;
        
        private BeginOperationDelegate onBeginRegisterUserDelegate;
        
        private EndOperationDelegate onEndRegisterUserDelegate;
        
        private System.Threading.SendOrPostCallback onRegisterUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginVerifyUserAccountExistsDelegate;
        
        private EndOperationDelegate onEndVerifyUserAccountExistsDelegate;
        
        private System.Threading.SendOrPostCallback onVerifyUserAccountExistsCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public NotificationServiceClient() {
        }
        
        public NotificationServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public NotificationServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public NotificationServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public NotificationServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<AuthenticateUserCompletedEventArgs> AuthenticateUserCompleted;
        
        public event System.EventHandler<GetNotificationsCompletedEventArgs> GetNotificationsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> RegisterSubscriberCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UnregisterSubscriberCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SendNotificationCompleted;
        
        public event System.EventHandler<RegisterUserCompletedEventArgs> RegisterUserCompleted;
        
        public event System.EventHandler<VerifyUserAccountExistsCompletedEventArgs> VerifyUserAccountExistsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Riveu.Notifications.WindowsPhone8.NotificationService.INotificationService.BeginAuthenticateUser(string username, string password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAuthenticateUser(username, password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool Riveu.Notifications.WindowsPhone8.NotificationService.INotificationService.EndAuthenticateUser(System.IAsyncResult result) {
            return base.Channel.EndAuthenticateUser(result);
        }
        
        private System.IAsyncResult OnBeginAuthenticateUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string username = ((string)(inValues[0]));
            string password = ((string)(inValues[1]));
            return ((Riveu.Notifications.WindowsPhone8.NotificationService.INotificationService)(this)).BeginAuthenticateUser(username, password, callback, asyncState);
        }
        
        private object[] OnEndAuthenticateUser(System.IAsyncResult result) {
            bool retVal = ((Riveu.Notifications.WindowsPhone8.NotificationService.INotificationService)(this)).EndAuthenticateUser(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAuthenticateUserCompleted(object state) {
            if ((this.AuthenticateUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AuthenticateUserCompleted(this, new AuthenticateUserCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AuthenticateUserAsync(string username, string password) {
            this.AuthenticateUserAsync(username, password, null);
        }
        
        public void AuthenticateUserAsync(string username, string password, object userState) {
            if ((this.onBeginAuthenticateUserDelegate == null)) {
                this.onBeginAuthenticateUserDelegate = new BeginOperationDelegate(this.OnBeginAuthenticateUser);
            }
            if ((this.onEndAuthenticateUserDelegate == null)) {
                this.onEndAuthenticateUserDelegate = new EndOperationDelegate(this.OnEndAuthenticateUser);
            }
            if ((this.onAuthenticateUserCompletedDelegate == null)) {
                this.onAuthenticateUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAuthenticateUserCompleted);
            }
            base.InvokeAsync(this.onBeginAuthenticateUserDelegate, new object[] {
                        username,
                        password}, this.onEndAuthenticateUserDelegate, this.onAuthenticateUserCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Riveu.Notifications.WindowsPhone8.NotificationService.INotificationService.BeginGetNotifications(string username, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetNotifications(username, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<object> Riveu.Notifications.WindowsPhone8.NotificationService.INotificationService.EndGetNotifications(System.IAsyncResult result) {
            return base.Channel.EndGetNotifications(result);
        }
        
        private System.IAsyncResult OnBeginGetNotifications(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string username = ((string)(inValues[0]));
            return ((Riveu.Notifications.WindowsPhone8.NotificationService.INotificationService)(this)).BeginGetNotifications(username, callback, asyncState);
        }
        
        private object[] OnEndGetNotifications(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<object> retVal = ((Riveu.Notifications.WindowsPhone8.NotificationService.INotificationService)(this)).EndGetNotifications(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetNotificationsCompleted(object state) {
            if ((this.GetNotificationsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetNotificationsCompleted(this, new GetNotificationsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetNotificationsAsync(string username) {
            this.GetNotificationsAsync(username, null);
        }
        
        public void GetNotificationsAsync(string username, object userState) {
            if ((this.onBeginGetNotificationsDelegate == null)) {
                this.onBeginGetNotificationsDelegate = new BeginOperationDelegate(this.OnBeginGetNotifications);
            }
            if ((this.onEndGetNotificationsDelegate == null)) {
                this.onEndGetNotificationsDelegate = new EndOperationDelegate(this.OnEndGetNotifications);
            }
            if ((this.onGetNotificationsCompletedDelegate == null)) {
                this.onGetNotificationsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetNotificationsCompleted);
            }
            base.InvokeAsync(this.onBeginGetNotificationsDelegate, new object[] {
                        username}, this.onEndGetNotificationsDelegate, this.onGetNotificationsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Riveu.Notifications.WindowsPhone8.NotificationService.INotificationService.BeginRegisterSubscriber(string username, string password, string Uri, string deviceType, string deviceId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRegisterSubscriber(username, password, Uri, deviceType, deviceId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Riveu.Notifications.WindowsPhone8.NotificationService.INotificationService.EndRegisterSubscriber(System.IAsyncResult result) {
            base.Channel.EndRegisterSubscriber(result);
        }
        
        private System.IAsyncResult OnBeginRegisterSubscriber(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string username = ((string)(inValues[0]));
            string password = ((string)(inValues[1]));
            string Uri = ((string)(inValues[2]));
            string deviceType = ((string)(inValues[3]));
            string deviceId = ((string)(inValues[4]));
            return ((Riveu.Notifications.WindowsPhone8.NotificationService.INotificationService)(this)).BeginRegisterSubscriber(username, password, Uri, deviceType, deviceId, callback, asyncState);
        }
        
        private object[] OnEndRegisterSubscriber(System.IAsyncResult result) {
            ((Riveu.Notifications.WindowsPhone8.NotificationService.INotificationService)(this)).EndRegisterSubscriber(result);
            return null;
        }
        
        private void OnRegisterSubscriberCompleted(object state) {
            if ((this.RegisterSubscriberCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RegisterSubscriberCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RegisterSubscriberAsync(string username, string password, string Uri, string deviceType, string deviceId) {
            this.RegisterSubscriberAsync(username, password, Uri, deviceType, deviceId, null);
        }
        
        public void RegisterSubscriberAsync(string username, string password, string Uri, string deviceType, string deviceId, object userState) {
            if ((this.onBeginRegisterSubscriberDelegate == null)) {
                this.onBeginRegisterSubscriberDelegate = new BeginOperationDelegate(this.OnBeginRegisterSubscriber);
            }
            if ((this.onEndRegisterSubscriberDelegate == null)) {
                this.onEndRegisterSubscriberDelegate = new EndOperationDelegate(this.OnEndRegisterSubscriber);
            }
            if ((this.onRegisterSubscriberCompletedDelegate == null)) {
                this.onRegisterSubscriberCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRegisterSubscriberCompleted);
            }
            base.InvokeAsync(this.onBeginRegisterSubscriberDelegate, new object[] {
                        username,
                        password,
                        Uri,
                        deviceType,
                        deviceId}, this.onEndRegisterSubscriberDelegate, this.onRegisterSubscriberCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Riveu.Notifications.WindowsPhone8.NotificationService.INotificationService.BeginUnregisterSubscriber(string username, string password, string deviceType, string deviceId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUnregisterSubscriber(username, password, deviceType, deviceId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Riveu.Notifications.WindowsPhone8.NotificationService.INotificationService.EndUnregisterSubscriber(System.IAsyncResult result) {
            base.Channel.EndUnregisterSubscriber(result);
        }
        
        private System.IAsyncResult OnBeginUnregisterSubscriber(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string username = ((string)(inValues[0]));
            string password = ((string)(inValues[1]));
            string deviceType = ((string)(inValues[2]));
            string deviceId = ((string)(inValues[3]));
            return ((Riveu.Notifications.WindowsPhone8.NotificationService.INotificationService)(this)).BeginUnregisterSubscriber(username, password, deviceType, deviceId, callback, asyncState);
        }
        
        private object[] OnEndUnregisterSubscriber(System.IAsyncResult result) {
            ((Riveu.Notifications.WindowsPhone8.NotificationService.INotificationService)(this)).EndUnregisterSubscriber(result);
            return null;
        }
        
        private void OnUnregisterSubscriberCompleted(object state) {
            if ((this.UnregisterSubscriberCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UnregisterSubscriberCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UnregisterSubscriberAsync(string username, string password, string deviceType, string deviceId) {
            this.UnregisterSubscriberAsync(username, password, deviceType, deviceId, null);
        }
        
        public void UnregisterSubscriberAsync(string username, string password, string deviceType, string deviceId, object userState) {
            if ((this.onBeginUnregisterSubscriberDelegate == null)) {
                this.onBeginUnregisterSubscriberDelegate = new BeginOperationDelegate(this.OnBeginUnregisterSubscriber);
            }
            if ((this.onEndUnregisterSubscriberDelegate == null)) {
                this.onEndUnregisterSubscriberDelegate = new EndOperationDelegate(this.OnEndUnregisterSubscriber);
            }
            if ((this.onUnregisterSubscriberCompletedDelegate == null)) {
                this.onUnregisterSubscriberCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUnregisterSubscriberCompleted);
            }
            base.InvokeAsync(this.onBeginUnregisterSubscriberDelegate, new object[] {
                        username,
                        password,
                        deviceType,
                        deviceId}, this.onEndUnregisterSubscriberDelegate, this.onUnregisterSubscriberCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Riveu.Notifications.WindowsPhone8.NotificationService.INotificationService.BeginSendNotification(string username, string password, string message, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSendNotification(username, password, message, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Riveu.Notifications.WindowsPhone8.NotificationService.INotificationService.EndSendNotification(System.IAsyncResult result) {
            base.Channel.EndSendNotification(result);
        }
        
        private System.IAsyncResult OnBeginSendNotification(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string username = ((string)(inValues[0]));
            string password = ((string)(inValues[1]));
            string message = ((string)(inValues[2]));
            return ((Riveu.Notifications.WindowsPhone8.NotificationService.INotificationService)(this)).BeginSendNotification(username, password, message, callback, asyncState);
        }
        
        private object[] OnEndSendNotification(System.IAsyncResult result) {
            ((Riveu.Notifications.WindowsPhone8.NotificationService.INotificationService)(this)).EndSendNotification(result);
            return null;
        }
        
        private void OnSendNotificationCompleted(object state) {
            if ((this.SendNotificationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SendNotificationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SendNotificationAsync(string username, string password, string message) {
            this.SendNotificationAsync(username, password, message, null);
        }
        
        public void SendNotificationAsync(string username, string password, string message, object userState) {
            if ((this.onBeginSendNotificationDelegate == null)) {
                this.onBeginSendNotificationDelegate = new BeginOperationDelegate(this.OnBeginSendNotification);
            }
            if ((this.onEndSendNotificationDelegate == null)) {
                this.onEndSendNotificationDelegate = new EndOperationDelegate(this.OnEndSendNotification);
            }
            if ((this.onSendNotificationCompletedDelegate == null)) {
                this.onSendNotificationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSendNotificationCompleted);
            }
            base.InvokeAsync(this.onBeginSendNotificationDelegate, new object[] {
                        username,
                        password,
                        message}, this.onEndSendNotificationDelegate, this.onSendNotificationCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Riveu.Notifications.WindowsPhone8.NotificationService.INotificationService.BeginRegisterUser(string username, string password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRegisterUser(username, password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool Riveu.Notifications.WindowsPhone8.NotificationService.INotificationService.EndRegisterUser(System.IAsyncResult result) {
            return base.Channel.EndRegisterUser(result);
        }
        
        private System.IAsyncResult OnBeginRegisterUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string username = ((string)(inValues[0]));
            string password = ((string)(inValues[1]));
            return ((Riveu.Notifications.WindowsPhone8.NotificationService.INotificationService)(this)).BeginRegisterUser(username, password, callback, asyncState);
        }
        
        private object[] OnEndRegisterUser(System.IAsyncResult result) {
            bool retVal = ((Riveu.Notifications.WindowsPhone8.NotificationService.INotificationService)(this)).EndRegisterUser(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRegisterUserCompleted(object state) {
            if ((this.RegisterUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RegisterUserCompleted(this, new RegisterUserCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RegisterUserAsync(string username, string password) {
            this.RegisterUserAsync(username, password, null);
        }
        
        public void RegisterUserAsync(string username, string password, object userState) {
            if ((this.onBeginRegisterUserDelegate == null)) {
                this.onBeginRegisterUserDelegate = new BeginOperationDelegate(this.OnBeginRegisterUser);
            }
            if ((this.onEndRegisterUserDelegate == null)) {
                this.onEndRegisterUserDelegate = new EndOperationDelegate(this.OnEndRegisterUser);
            }
            if ((this.onRegisterUserCompletedDelegate == null)) {
                this.onRegisterUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRegisterUserCompleted);
            }
            base.InvokeAsync(this.onBeginRegisterUserDelegate, new object[] {
                        username,
                        password}, this.onEndRegisterUserDelegate, this.onRegisterUserCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Riveu.Notifications.WindowsPhone8.NotificationService.INotificationService.BeginVerifyUserAccountExists(string username, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginVerifyUserAccountExists(username, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool Riveu.Notifications.WindowsPhone8.NotificationService.INotificationService.EndVerifyUserAccountExists(System.IAsyncResult result) {
            return base.Channel.EndVerifyUserAccountExists(result);
        }
        
        private System.IAsyncResult OnBeginVerifyUserAccountExists(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string username = ((string)(inValues[0]));
            return ((Riveu.Notifications.WindowsPhone8.NotificationService.INotificationService)(this)).BeginVerifyUserAccountExists(username, callback, asyncState);
        }
        
        private object[] OnEndVerifyUserAccountExists(System.IAsyncResult result) {
            bool retVal = ((Riveu.Notifications.WindowsPhone8.NotificationService.INotificationService)(this)).EndVerifyUserAccountExists(result);
            return new object[] {
                    retVal};
        }
        
        private void OnVerifyUserAccountExistsCompleted(object state) {
            if ((this.VerifyUserAccountExistsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.VerifyUserAccountExistsCompleted(this, new VerifyUserAccountExistsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void VerifyUserAccountExistsAsync(string username) {
            this.VerifyUserAccountExistsAsync(username, null);
        }
        
        public void VerifyUserAccountExistsAsync(string username, object userState) {
            if ((this.onBeginVerifyUserAccountExistsDelegate == null)) {
                this.onBeginVerifyUserAccountExistsDelegate = new BeginOperationDelegate(this.OnBeginVerifyUserAccountExists);
            }
            if ((this.onEndVerifyUserAccountExistsDelegate == null)) {
                this.onEndVerifyUserAccountExistsDelegate = new EndOperationDelegate(this.OnEndVerifyUserAccountExists);
            }
            if ((this.onVerifyUserAccountExistsCompletedDelegate == null)) {
                this.onVerifyUserAccountExistsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnVerifyUserAccountExistsCompleted);
            }
            base.InvokeAsync(this.onBeginVerifyUserAccountExistsDelegate, new object[] {
                        username}, this.onEndVerifyUserAccountExistsDelegate, this.onVerifyUserAccountExistsCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override Riveu.Notifications.WindowsPhone8.NotificationService.INotificationService CreateChannel() {
            return new NotificationServiceClientChannel(this);
        }
        
        private class NotificationServiceClientChannel : ChannelBase<Riveu.Notifications.WindowsPhone8.NotificationService.INotificationService>, Riveu.Notifications.WindowsPhone8.NotificationService.INotificationService {
            
            public NotificationServiceClientChannel(System.ServiceModel.ClientBase<Riveu.Notifications.WindowsPhone8.NotificationService.INotificationService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginAuthenticateUser(string username, string password, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = username;
                _args[1] = password;
                System.IAsyncResult _result = base.BeginInvoke("AuthenticateUser", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndAuthenticateUser(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("AuthenticateUser", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetNotifications(string username, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = username;
                System.IAsyncResult _result = base.BeginInvoke("GetNotifications", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<object> EndGetNotifications(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<object> _result = ((System.Collections.ObjectModel.ObservableCollection<object>)(base.EndInvoke("GetNotifications", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRegisterSubscriber(string username, string password, string Uri, string deviceType, string deviceId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[5];
                _args[0] = username;
                _args[1] = password;
                _args[2] = Uri;
                _args[3] = deviceType;
                _args[4] = deviceId;
                System.IAsyncResult _result = base.BeginInvoke("RegisterSubscriber", _args, callback, asyncState);
                return _result;
            }
            
            public void EndRegisterSubscriber(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("RegisterSubscriber", _args, result);
            }
            
            public System.IAsyncResult BeginUnregisterSubscriber(string username, string password, string deviceType, string deviceId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = username;
                _args[1] = password;
                _args[2] = deviceType;
                _args[3] = deviceId;
                System.IAsyncResult _result = base.BeginInvoke("UnregisterSubscriber", _args, callback, asyncState);
                return _result;
            }
            
            public void EndUnregisterSubscriber(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("UnregisterSubscriber", _args, result);
            }
            
            public System.IAsyncResult BeginSendNotification(string username, string password, string message, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = username;
                _args[1] = password;
                _args[2] = message;
                System.IAsyncResult _result = base.BeginInvoke("SendNotification", _args, callback, asyncState);
                return _result;
            }
            
            public void EndSendNotification(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("SendNotification", _args, result);
            }
            
            public System.IAsyncResult BeginRegisterUser(string username, string password, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = username;
                _args[1] = password;
                System.IAsyncResult _result = base.BeginInvoke("RegisterUser", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndRegisterUser(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("RegisterUser", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginVerifyUserAccountExists(string username, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = username;
                System.IAsyncResult _result = base.BeginInvoke("VerifyUserAccountExists", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndVerifyUserAccountExists(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("VerifyUserAccountExists", _args, result)));
                return _result;
            }
        }
    }
}
